<?php
namespace SpiceCRM\modules\Mailboxes\Handlers;

use SimpleXMLElement;
use DateTime;
use SpiceCRM\includes\ErrorHandlers\Exception;
use SpiceCRM\modules\Mailboxes\Mailbox;

class A1Handler extends TransportHandler
{
    const URL_SEND   = 'https://prosms.dds.a1.net/mssms/rest/sendSms.do';
    const URL_FETCH  = 'https://prosms.dds.a1.net/mssms/rest/incomingSms.do';
    const URL_STATUS = 'https://prosms.dds.a1.net/mssms/rest/smsDeliveryStatus.do';

    const STATUS_FAILED = -1;
    const STATUS_TRANSMITTING = 0;
    const STATUS_SENT = 1;

    protected function initTransportHandler() {

    }

    public function testConnection($testDestination) {
        $msgParams = $this->getAuthenticationParams();
        $msgParams['recipients'] = $testDestination;
        $msgParams['msgtext']    = 'This is an autogenerated Test Message from SpiceCRM';

        if ($this->mailbox->a1_sender) {
            $msgParams['sender'] = $this->mailbox->a1_sender;
        }

        try {
            $res = $this->dispatch($msgParams);
            return [
                'result'     => true,
                'message_id' => $res,
            ];
        } catch (\Exception $e) {
            $this->log(Mailbox::LOG_DEBUG, $this->mailbox->name . ': ' . $e->getMessage());
            return [
                'errors' => $e->getMessage(),
            ];
        }
    }

    protected function composeEmail($message) {
        $this->checkTextMessageClass($message);

        $msgParams = $this->getAuthenticationParams();
        if ($this->mailbox->catch_all_address == '') {
            $msgParams['recipients'] = $message->msisdn;
        } else {
            $msgParams['recipients'] = $this->mailbox->catch_all_address;
        }

        $msgParams['msgtext']    = $message->description;

        // optional fields
        $msgParams['deliveryReceipts'] = true;
        if ($this->mailbox->a1_sender) {
            $msgParams['sender'] = $this->mailbox->a1_sender;
        }
        // recipientLists
        // senddate
        // expiredate
        // splitmsg
        // truncatemsg
        // ignoreinvalidaddr

        return $msgParams;
    }

    protected function dispatch($msgParams) {
        $getParams = http_build_query($msgParams);
        $url = self::URL_SEND . '?' . $getParams;

        try {
            $xmlResponse = $this->request($url);
            return [
                'message_id' => $xmlResponse->smsReferenceId,
                'status' => 'sent', // todo check the actual status
            ];
        } catch (\Exception $e) {
            return [
                'status' => 'failed',
                'error_message' => $e->getMessage(),
            ];
        }
    }

    /**
     * Checks the delivery status for a given message ID.
     *
     * todo a cron job is necessary for that function. if it's called directly after sending a text message it just
     * returns "transmitting" every time.
     *
     * @param $msgId
     * @return string
     */
    private function checkDeliveryStatus($msgId) {
        $getParams = $this->getAuthenticationParams();
        $getParams['ids'] = $msgId;
        $url = self::URL_STATUS . '?' . http_build_query($getParams);

        $xmlResponse = $this->request($url);

        switch ($xmlResponse->statusList->jobStatus) {
            case self::STATUS_FAILED:
                return 'failed';
            case self::STATUS_TRANSMITTING:
                return 'transmitting';
            case self::STATUS_SENT:
                return 'sent';
            default:
                return 'draft';
        }
    }

    /**
     * Fetches the incoming text messages for a given time interval.
     *
     * @param DateTime $startDate
     * @param DateTime $endDate
     */
    private function fetchMessages(DateTime $startDate, DateTime $endDate) {
        $getParams = $this->getAuthenticationParams();
        $getParams['from'] = $startDate->format('Y.m.d\TH:i');
        $getParams['to'] = $endDate->format('Y.m.d\TH:i');

        $url = self::URL_FETCH . '?' . http_build_query($getParams);

        $xmlResponse = $this->request($url);

        foreach ($xmlResponse as $message) {
            $this->handleIncomingMessage($message);
        }
    }

    /**
     * Performs the curl get request.
     *
     * @param $url
     * @return SimpleXMLElement
     * @throws \Exception
     */
    private function request($url) {
        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL            => $url,
            CURLOPT_POST           => false,
        ]);

        $response = curl_exec($curl);
        $errors = curl_error($curl);
        curl_close($curl);
        $xmlResponse = simplexml_load_string($response);

        if ($xmlResponse) {
            return $xmlResponse;
        } else {
            throw new Exception($response);
        }
    }

    /**
     * Returns an array with the authentication credentials to prefill the request parameters.
     *
     * @return array
     */
    private function getAuthenticationParams() {
        return [
            'username' => $this->mailbox->a1_username,
            'password' => $this->mailbox->a1_password,
        ];
    }

    /**
     * todo to be implemented if needed
     * delivery receipts can be checked here
     *
     * @param $message
     */
    private function handleIncomingMessage($message) {

    }
}
